name: Build Luma WRTQ-329ACN-v24.10.1

on:
  workflow_dispatch:
    inputs:
      force-build:
        description: "Build new firmware anyway"
        required: false
        default: "true"
      ssh:
        description: "SSH connection to Actions"
        required: false
        default: "false"
# Uncomment the following to run regularly. Note that the cron expression here does not contain seconds.
#  schedule:
#    - cron: 0 */18 * * *

env:
  # REPO means the OpenWrt repo you want to build from in this workflow. 
  # You can modify the REPO_NAME to any name you want, but remember not to let it have the same name in 
  # other workflows.
  REPO_NAME: Luma WRTQ-329ACN-v24.10.1
  REPO_URL: https://github.com/openwrt/openwrt.git
  REPO_BRANCH: v24.10.1
  # 更新依赖包列表以适应 Ubuntu 24.04
  BUILD_DEPENDS:  "build-essential clang flex bison g++ gawk \
gcc-multilib g++-multilib gettext git libncurses-dev libssl-dev \
python3-distutils rsync unzip zlib1g-dev file wget ninja-build \
libelf-dev patchelf"
  # CONFIG_FILE is the name of your own config files for compiling, you should upload these files into the root 
  # directory of your workflow repo.
  CONFIG_FILE: configs/luma-v24.10.1.config
  # CUSTOM_SCRIPT_1 is the name of extra bash script you want to execute before feeds update&install.
  # CUSTOM_SCRIPT_2 is the name of extra bash script you want to execute after feeds update&install.
  # You can modify the initial settings of your firmware through these two scripts. If this is what you need,
  # please upload your scripts to the root directory of your workflow repo.
  CUSTOM_SCRIPT_1: CUSTOM_SCRIPT/empty.sh
  CUSTOM_SCRIPT_2: CUSTOM_SCRIPT/empty.sh
  # STORE_PRODUCTS determine whether to upload all compilation products to workflow artifacts.
  # Not only firmwires, all compiled packages will be here, including compiled but not solidified into firmware.
  STORE_PRODUCTS: false
  # STORE_FIRMWARE determine whether to upload firmwares to workflow artifacts.
  STORE_FIRMWARE: true
  # The following are options of where the firmware needs to be transfered. 
  COWTRANSFER_FIRMWARE: false
  WETRANSFER_FIRMWARE: false
  RELEASE_FIRMWARE: true
  # Change the following to your time zone.
  TIME_ZONE: Asia/Shanghai

jobs:
  check:
    name: Check for source code updates
    # 明确指定使用 Ubuntu 24.04
    runs-on: ubuntu-24.04
    outputs:
      cache-hit: ${{ steps.cache-hash.outputs.cache-hit }}

    steps:
      - name: Get Commit Hash
        id: get-hash
        run: |
          git clone -b $REPO_BRANCH --single-branch $REPO_URL ./
          echo "commit-hash=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: Compare Commit Hash
        id: cache-hash
        uses: actions/cache@main
        with:
          path: .${{ env.REPO_NAME }}-${{ env.REPO_BRANCH }}-commit-hash
          key: HEAD-${{ steps.get-hash.outputs.commit-hash }}

      - name: Save New Commit Hash
        if: steps.cache-hash.outputs.cache-hit != 'true'
        run: |
          echo ${{ steps.get-hash.outputs.commit-hash }} | 
            tee .$REPO_NAME-$REPO_BRANCH-commit-hash

  build:
    name: Build firmware
    # 明确指定使用 Ubuntu 24.04
    runs-on: ubuntu-24.04
    needs: check
    permissions:
      contents: write
    if: needs.check.outputs.cache-hit != 'true' || github.event.inputs.force-build == 'true'

    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Free disk space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: false
          # 针对 Ubuntu 24.04 调整清理策略
          apt-get: true
          # 排除必要的系统包
          apt-get-packages-to-keep: "linux-image-generic,linux-headers-generic"

      - name: Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo -E apt-get -qq update
          # 避免不必要的系统升级
          sudo -E apt-get -qq install --only-upgrade libc6
          sudo -E apt-get -qq install $BUILD_DEPENDS
          sudo -E apt-get -qq autoremove
          sudo timedatectl set-timezone $TIME_ZONE
          sudo mkdir -p /workdir/
          sudo chown $USER:$GROUPS /workdir/
          # 确保 Python 3 是默认版本
          sudo update-alternatives --install /usr/bin/python python /usr/bin/python3 1

      - name: Clone source code
        working-directory: /workdir
        run: |
          df -hT $PWD
          git clone $REPO_URL openwrt/
          ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

      - name: Run custom-script-1
        run: |
          chmod +x $CUSTOM_SCRIPT_1
          cd openwrt/
          git pull
          git branch -a
          git tag
          git checkout $REPO_BRANCH
          $GITHUB_WORKSPACE/$CUSTOM_SCRIPT_1

      - name: Update feeds
        run: cd openwrt/ && ./scripts/feeds update -a

      - name: Install feeds
        run: cd openwrt/ && ./scripts/feeds install -a

      - name: Load custom configuration
        run: |
          [ -e files ] && mv files/ openwrt/files/
          [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config

      - name: Run custom-script-2
        run: |
          chmod +x $CUSTOM_SCRIPT_2
          cd openwrt/
          $GITHUB_WORKSPACE/$CUSTOM_SCRIPT_2

      - name: Download packages
        id: download-packages
        run: |
          cd openwrt/
          make defconfig
          make download -j8

      - name: Compile the firmware
        id: compile
        run: |
          cd openwrt/
          echo -e "$(nproc) thread compile"
          # 优化编译命令以适应 Ubuntu 24.04 的性能
          make -j$(nproc) defconfig download clean world V=s
          echo "status=success" >> $GITHUB_OUTPUT
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

      - name: Check space usage
        if: (!cancelled())
        run: df -hT

      - name: Upload all compilation products
        uses: actions/upload-artifact@main
        if: steps.compile.outputs.status == 'success' && env.STORE_PRODUCTS == 'true'
        with:
          name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: openwrt/bin/

      - name: Organize firmware-related files
        id: organize-files
        run: |
          cd openwrt/bin/targets/*/*
          rm -rf packages/
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Upload firmware directory
        uses: actions/upload-artifact@main
        if: steps.organize-files.outputs.status == 'success' && env.STORE_FIRMWARE == 'true' && !cancelled()
        with:
          name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE }}

      - name: Generate release tag
        id: tag
        if: env.RELEASE_FIRMWARE == 'true' && !cancelled()
        run: |
          echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
          touch release.txt
          echo "$REPO_NAME --- Build from $REPO_URL $REPO_BRANCH" >> release.txt
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Install GitHub CLI
        if: steps.tag.outputs.status == 'success' && !cancelled()
        uses: actions/github-script@v6
        with:
          script: |
            const { exec } = require('child_process');
            exec('curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg', (error, stdout, stderr) => {
              if (error) {
                console.error(`执行错误: ${error}`);
                return;
              }
              exec('echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null', (error, stdout, stderr) => {
                if (error) {
                  console.error(`执行错误: ${error}`);
                  return;
                }
                exec('sudo apt update && sudo apt install gh -y', (error, stdout, stderr) => {
                  if (error) {
                    console.error(`执行错误: ${error}`);
                    return;
                  }
                  console.log(`安装成功: ${stdout}`);
                });
              });
            });

      - name: Upload firmware to release using GitHub CLI
        if: steps.tag.outputs.status == 'success' && !cancelled()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # 创建发布
          gh release create ${{ steps.tag.outputs.release_tag }} \
            --title "${{ steps.tag.outputs.release_tag }}" \
            --notes-file release.txt
          
          # 上传文件
          for file in ${{ env.FIRMWARE }}/*; do
            if [ -f "$file" ]; then
              echo "Uploading $file..."
              gh release upload ${{ steps.tag.outputs.release_tag }} "$file" --clobber
            fi
          done
